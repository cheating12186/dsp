--------------------------------------------linearity-----------------------------------------------------

clear all; close all; clc;
% Define time index
n = -10:10;
N = length(n);
omega = linspace(-pi, pi, 100);
% Define two signals for linearity proof:
% Define unit ramp function r(n)
x1 = zeros(1, N);
for ii = 1:N
 if (n(ii) >= 0)
 x1(ii) = n(ii);
 else
 x1(ii) = 0;
 end
end
% Define unit step function u(n)
x2 = zeros(1, N);
for ii = 1:N
 if (n(ii) >= 0)
 x2(ii) = 1;
 else
 x2(ii) = 0;
 end
end
% Plot x1(n) and x2(n)
figure;
subplot(3,2,1);
stem(n, x1, 'r', 'filled'); grid on;
xlabel('n'); ylabel('x_1(n)');
title('Unit ramp Function r(n)');
subplot(3,2,2);
stem(n, x2, 'b', 'filled'); grid on;
xlabel('n'); ylabel('x_2(n)');
title('Unit Step Function u(n)');
% Define scaling factors
a = 2; b = 3;
% Compute DFT of x1(n) and x2(n)
X1 = Compute_DFT(x1, N);
X2 = Compute_DFT(x2, N);
% Compute DFT of y(n) = a*x1(n) + b*x2(n)
y = a*x1 + b*x2;
Y = Compute_DFT(y, N);
% Expected output: Y(ω) = a*X1(ω) + b*X2(ω)
Y_expected = a*X1 + b*X2;
% Plot DFT Magnitudes to verify Linearity
subplot(3,2,3);
plot(abs(X1), 'r'); grid on;
xlabel('k'); ylabel('|X_1(k)|');
title('Magnitude of DFT of x_1(n)');
subplot(3,2,4);
plot(abs(X2), 'b'); grid on;
xlabel('k'); ylabel('|X_2(k)|');
title('Magnitude of DFT of x_2(n)');
subplot(3,2,5);
plot(abs(Y), 'k'); grid on;
xlabel('k'); ylabel('|Y(k)|');
title('Magnitude of DFT of a*x_1(n) + b*x_2(n)');
subplot(3,2,6);
plot(abs(Y_expected), 'g--'); grid on;
xlabel('k'); ylabel('|Expected Y(k)|');
title('Expected Magnitude a*|X_1(k)| + b*|X_2(k)|');
% Function to Compute DFT
function X = Compute_DFT(x, N)
 X = zeros(1, N);
 for k = 1:N
 for n = 1:N
X(k) = X(k) + x(n) * exp(-1j * 2 * pi * (k-1) * (n-1) / N);
 end
 end
end


-----------------------------------------------parsevals theorem---------------------------------------------------------

linearity.m
clear all; close all; clc;
% Define time index
n = -50:50;
N = length(n);
% Define Signal: step Function u[n]
x = zeros(1, N);
for ii = 1:N
 if (n(ii) >= 0)
 x(ii) = 1;
 end
end
% Compute Energy in Time Domain
E_time = sum(abs(x).^2);
% Compute DFT manually
X = Compute_DFT(x);
% Compute Energy in Frequency Domain using Parseval's Theorem
E_freq = (1/N) * sum(abs(X).^2);
% Compare Energies
fprintf('Energy in Time Domain = %.4f\n', E_time);
fprintf('Energy in Frequency Domain = %.4f\n',E_freq);
if abs(E_time - E_freq) < 1e-4
 disp('Parseval’s theorem is verified!');
else
 disp('Energy mismatch! Check calculations.');
end
% Plot Results
figure;
% Energy in Time Domain
subplot(2,1,1);
stem(n, abs(x).^2, 'r', 'filled'); grid on;
title('Energy in Time Domain |x(n)|^2');
xlabel('n'); ylabel('|x(n)|^2');
ylim([0, max(abs(x).^2) * 1.1]);
% Energy in Frequency Domain
subplot(2,1,2);
stem(0:N-1, abs(X).^2 / N, 'b', 'filled'); grid on;
title('Energy in Frequency Domain |X(k)|^2 / N');
xlabel('Frequency Index k'); ylabel('|X(k)|^2 / N');
ylim([0, max(abs(X).^2 / N) * 1.1]);
% Function to Compute DFT manually
function X = Compute_DFT(x)
 N = length(x); % Number of samples
 X = zeros(1, N); % Initialize DFT output

 for k = 1:N % Loop over frequency bins
 for n = 1:N % Loop over time samples
 X(k) = X(k) + x(n) * exp(-1j * 2 * pi * (k-1) *(n-1) / N);
 end
 end
end


------------------------------------------------time reversal-----------------------------------------------------

clear all;
close all;
clc;
% Define time index and frequency range
n = -20:20;
N = length(n);
omega = linspace(-4*pi, 4*pi, 100);
% Define x(n) (cos Function)
amp = 5 ;
M = 1;
N_cos = 10;
x = amp * cos(2 * pi * M / N_cos * n); % cos function
% Compute DFT of x(n)
X = Compute_DFT(x);
% Compute time-reversed signal x(-n)
x_reversed = x(end:-1:1); % Time reversal without using flip function
% Compute DFT of time-reversed signal
X_reversed = Compute_DFT(x_reversed);
% Expected output based on time-reversal property: X(-ω)
X_expected = X(end:-1:1); % Expected DFT based on time-reversal property
% Plot results
figure;
% Plot Original Signal
subplot(4,1,1);
stem(n, x, 'r'); grid on;
xlabel('n'); ylabel('x(n)');
title('Original Signal x(n)');
% Plot DFT of Original Signal
subplot(4,1,2);
stem(abs(X), 'b'); grid on;
xlabel('Frequency Index k'); ylabel('|X(k)|');
title('Magnitude of DFT of x(n)');
% Plot DFT of Time-Reversed Signal
subplot(4,1,3);
stem(abs(X_reversed), 'g'); grid on;
xlabel('Frequency Index k');
ylabel('|X_{reversed}(k)|');
title('Magnitude of DFT of Time-Reversed Signal');
% Plot Expected DFT from Time-Reversal Property
subplot(4,1,4);
stem(abs(X_expected), 'k--'); grid on;
xlabel('Frequency Index k'); ylabel('|X(-k)|Expected');
title('Expected Magnitude of DFT based on TimeReversal Property');
% Function to Compute DFT
function X = Compute_DFT(x)
 N = length(x);
 X = zeros(1, N);
 for k = 1:N
 for n = 1:N
X(k) = X(k) + x(n) * exp(-1j * 2 * pi * (k-1) *(n-1) / N);
 end
 end
end

---------------------------------------------------------------------time shifting---------------------------------------------------------


clear all; close all; clc;
% Define time index
n = -15:5;
N = length(n); % Number of samples
% Define a rectangular pulse signal
rect_N = 7; % Width of the rectangular pulse
x = zeros(1, N);
for ii = 1:N
 if (n(ii) >= -rect_N) && (n(ii) <= rect_N)
 x(ii) = 1; % Assign 1 within the pulse width
 end
end
% Compute DFT of the original signal
X = Compute_DFT(x);
% Define time-shift value
k = 2; % Adjusted to avoid out-of-bounds shift
x_shifted = zeros(1, N);
% Generate the time-shifted rectangular pulse
for ii = 1:N
 if (ii-k > 0) && (ii-k <= N) % Ensure valid index after shift
 x_shifted(ii) = x(ii-k);
 end
end
% Compute DFT of the shifted signal
X_shifted = Compute_DFT(x_shifted);
% Expected DFT of shifted signal using time-shifting property
m = 0:N-1; % Frequency indices
X_expected = X .* exp(-1j * 2 * pi * m * k / N); % Timeshifting property
% Plot results
figure;
% Original Signal
subplot(5,1,1);
stem(n, x, 'r', 'filled'); grid on;
xlabel('n'); ylabel('x(n)');
title('Original Signal x(n)');
ylim([-0.2 1.2]);
% Magnitude of DFT of Original Signal
subplot(5,1,2);
stem(m, abs(X), 'b'); grid on;
xlabel('Frequency Index k'); ylabel('|X(k)|');
title('Magnitude of DFT of x(n)');
% Time-Shifted Signal
subplot(5,1,3);
stem(n, x_shifted, 'k', 'filled'); grid on;
xlabel('n'); ylabel('x(n - k)');
title(['Time-Shifted Signal x(n - ', num2str(k), ')']);
ylim([-0.2 1.2]);
% Magnitude of DFT of Shifted Signal
subplot(5,1,4);
stem(m, abs(X_shifted), 'g'); hold on;
grid on;
xlabel('Frequency Index k'); ylabel('|X(k)|');
title('Magnitude of DFT of Shifted x(n - k)');
% Magnitude of Expected DFT using Time-Shifting Property
subplot(5,1,5);
stem(m, abs(X_expected), 'k--'); % Expected DFT
grid on;
xlabel('Frequency Index k'); ylabel('|X(k)|');
title('Expected DFT Magnitude from Time-Shifting Property');
% Function to Compute DFT
function X = Compute_DFT(x)
 N = length(x);
 X = zeros(1, N);
 for k = 1:N
 for n = 1:N
 X(k) = X(k) + x(n) * exp(-1j * 2 * pi * (k-1) * (n-1) / N);
 end
 end
end
